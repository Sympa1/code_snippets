"""
Problemstellung:
Doe Objekte sind in einer Baumstruktur organisiert, wobei Bl√§tter und Knoten gibt. Die Knoten sind die Verzweigungen
des Baumes und die Bl√§tter die jeweiligen Endpunkte. Der Client soll sowohl mit Bl√§ttern als auch mit Knoten
arbeiten k√∂nnen, ohne den Unterschied zu kennen.

Beispiele:
Grafische Benutzeroberfl√§chen, bei denen Container (Knoten) andere Container oder Widgets (Bl√§tter) enthalten k√∂nnen.
Dateisysteme, bei denen Verzeichnisse (Knoten) andere Verzeichnisse oder Dateien (Bl√§tter) enthalten k√∂nnen.
Verzeichnisstrukturen, bei denen Ordner (Knoten) andere Ordner oder Dateien (Bl√§tter) enthalten k√∂nnen.

Kurze Erkl√§rung:
Das Composite-Pattern erm√∂glicht es, Objekte in Baumstrukturen zu organisieren und sowohl einzelne Objekte
(Bl√§tter) als auch Gruppen von Objekten (Knoten) einheitlich zu behandeln. Sowohl Bl√§tter als auch Knoten
implementieren ein gemeinsames Interface, das es dem Client erm√∂glicht, mit beiden auf die gleiche Weise zu
interagieren. Dadurch wird die Komplexit√§t reduziert und die Wartbarkeit verbessert.

Nachteile:
- Spezielle Eigenschaften der Baumelelemente sind nur erschwert zug√§nglich.
- Baumelemente bieten einzelne geerbte Methoden m√∂glicherweise nicht an.
"""

# Einfaches Composite Pattern Beispiel mit Dateisystem
# In C# w√ºrde man hier ein Interface verwenden: public interface IDateiElement

# Basis-Klasse f√ºr alle Dateisystem-Elemente (Interface-Ersatz in Python)
# In C# w√§re das: public interface IDateiElement oder public abstract class DateiElement
class DateiElement:
    # Konstruktor der Basis-Klasse
    def __init__(self, name):
        # Name des Dateisystem-Elements speichern
        self.name = name
    
    # Basis-Methode um Gr√∂√üe zu berechnen (muss √ºberschrieben werden)
    def get_groesse(self):
        # Standard-Implementierung - wird von Kindklassen √ºberschrieben
        return 0
    
    # Basis-Methode um Element anzuzeigen (muss √ºberschrieben werden)
    def anzeigen(self, einrueckung=0):
        # Standard-Implementierung mit Einr√ºckung f√ºr Baumstruktur
        print("  " * einrueckung + self.name)

# BLATT-Klasse: Datei (hat keine Kinder)
# Implementiert das Blatt im Composite Pattern
class Datei(DateiElement):
    # Konstruktor f√ºr Datei-Objekte
    def __init__(self, name, groesse):
        # Ruft Basis-Konstruktor auf
        super().__init__(name)
        # Dateigr√∂√üe als Instanz-Variable speichern
        self.groesse = groesse
    
    # √úberschreibt get_groesse() - gibt die tats√§chliche Dateigr√∂√üe zur√ºck
    def get_groesse(self):
        # Blatt: gibt einfach seine eigene Gr√∂√üe zur√ºck
        return self.groesse
    
    # √úberschreibt anzeigen() - zeigt Datei mit Gr√∂√üe an
    def anzeigen(self, einrueckung=0):
        # Datei mit Gr√∂√üe und Einr√ºckung anzeigen
        print("  " * einrueckung + f"üìÑ {self.name} ({self.groesse} KB)")

# KNOTEN-Klasse: Ordner (kann Kinder haben - andere Ordner oder Dateien)
# Implementiert den Composite im Composite Pattern
class Ordner(DateiElement):
    # Konstruktor f√ºr Ordner-Objekte
    def __init__(self, name):
        # Ruft Basis-Konstruktor auf
        super().__init__(name)
        # Liste f√ºr Kinder-Elemente (kann Dateien und andere Ordner enthalten)
        self.kinder = []
    
    # Methode um Kind-Element hinzuzuf√ºgen (Datei oder Ordner)
    def hinzufuegen(self, element):
        # Element zur Kinder-Liste hinzuf√ºgen
        # Parameter: element kann sowohl Datei als auch Ordner sein (Polymorphismus)
        self.kinder.append(element)
    
    # Methode um Kind-Element zu entfernen
    def entfernen(self, element):
        # Element aus Kinder-Liste entfernen falls vorhanden
        if element in self.kinder:
            # Element aus Liste entfernen
            self.kinder.remove(element)
    
    # √úberschreibt get_groesse() - berechnet Gesamtgr√∂√üe aller Kinder
    def get_groesse(self):
        # Knoten: summiert die Gr√∂√üe aller Kinder auf
        gesamt_groesse = 0
        
        # Durch alle Kinder iterieren
        for kind in self.kinder:
            # Gr√∂√üe des Kindes zur Gesamtgr√∂√üe addieren
            # WICHTIG: Polymorphismus - egal ob Datei oder Ordner, beide haben get_groesse()
            gesamt_groesse += kind.get_groesse()
        
        # Gesamtgr√∂√üe zur√ºckgeben
        return gesamt_groesse
    
    # √úberschreibt anzeigen() - zeigt Ordner und alle Kinder an
    def anzeigen(self, einrueckung=0):
        # Ordner-Namen mit Icon und Einr√ºckung anzeigen
        print("  " * einrueckung + f"üìÅ {self.name}/")
        
        # Alle Kinder-Elemente anzeigen
        for kind in self.kinder:
            # Rekursiver Aufruf mit erh√∂hter Einr√ºckung
            # WICHTIG: Polymorphismus - egal ob Datei oder Ordner, beide haben anzeigen()
            kind.anzeigen(einrueckung + 1)

# Client-Code - arbeitet einheitlich mit Dateien und Ordnern
# Demonstriert dass Client keinen Unterschied zwischen Blatt und Knoten kennen muss
def main():
    # √úberschrift ausgeben
    print("=== Composite Pattern - Dateisystem Beispiel ===\n")
    
    # Einzelne Dateien erstellen (BL√ÑTTER)
    datei1 = Datei("dokument.txt", 50)      # Datei mit 50 KB
    datei2 = Datei("bild.jpg", 200)         # Datei mit 200 KB
    datei3 = Datei("video.mp4", 1500)       # Datei mit 1500 KB
    datei4 = Datei("musik.mp3", 300)        # Datei mit 300 KB
    
    # Ordner erstellen (KNOTEN)
    hauptordner = Ordner("Meine Dokumente")     # Haupt-Ordner
    bilder_ordner = Ordner("Bilder")            # Unter-Ordner f√ºr Bilder
    media_ordner = Ordner("Media")              # Unter-Ordner f√ºr Media
    
    # Baumstruktur aufbauen durch Hinzuf√ºgen von Elementen
    print("Dateisystem-Struktur wird aufgebaut...\n")
    
    # Dateien zu Ordnern hinzuf√ºgen
    bilder_ordner.hinzufuegen(datei2)          # bild.jpg ‚Üí Bilder/
    media_ordner.hinzufuegen(datei3)           # video.mp4 ‚Üí Media/
    media_ordner.hinzufuegen(datei4)           # musik.mp3 ‚Üí Media/
    
    # Ordner zu Haupt-Ordner hinzuf√ºgen (Verschachtelung!)
    hauptordner.hinzufuegen(datei1)            # dokument.txt ‚Üí Meine Dokumente/
    hauptordner.hinzufuegen(bilder_ordner)     # Bilder/ ‚Üí Meine Dokumente/
    hauptordner.hinzufuegen(media_ordner)      # Media/ ‚Üí Meine Dokumente/
    
    # Gesamte Struktur anzeigen
    print("Vollst√§ndige Dateisystem-Struktur:")
    hauptordner.anzeigen()  # Rekursive Anzeige der gesamten Baumstruktur
    
    print()  # Leere Zeile
    
    # Gr√∂√üen-Berechnungen demonstrieren
    print("=== Gr√∂√üen-Berechnungen ===")
    
    # WICHTIG: Client behandelt alle Elemente gleich (Polymorphismus)
    # Egal ob Datei (Blatt) oder Ordner (Knoten) - beide haben get_groesse()
    print(f"Gr√∂√üe von '{datei1.name}': {datei1.get_groesse()} KB")
    print(f"Gr√∂√üe von '{bilder_ordner.name}': {bilder_ordner.get_groesse()} KB")
    print(f"Gr√∂√üe von '{media_ordner.name}': {media_ordner.get_groesse()} KB")
    print(f"Gr√∂√üe von '{hauptordner.name}': {hauptordner.get_groesse()} KB")
    
    print()  # Leere Zeile
    
    # Einzelnes Element bearbeiten
    print("=== Element entfernen ===")
    print("Entferne video.mp4 aus Media-Ordner...")
    media_ordner.entfernen(datei3)  # Video-Datei entfernen
    
    # Struktur erneut anzeigen
    print("\nStruktur nach Entfernung:")
    hauptordner.anzeigen()
    
    # Gr√∂√üe nach Entfernung
    print(f"\nNeue Gr√∂√üe von '{hauptordner.name}': {hauptordner.get_groesse()} KB")
    
    print()  # Leere Zeile
    
    # Vorteile des Composite Patterns erl√§utern
    print("=== Vorteile des Composite Patterns ===")
    print("1. Client behandelt Dateien und Ordner gleich")
    print("2. Einfache Erweiterung um neue Element-Typen")
    print("3. Rekursive Operationen automatisch m√∂glich")
    print("4. Baumstrukturen nat√ºrlich abgebildet")

# Hilfsfunktion um zu demonstrieren dass Client keinen Unterschied kennt
def verarbeite_element(element):
    # Diese Funktion arbeitet mit JEDEM DateiElement
    # Egal ob es eine Datei (Blatt) oder Ordner (Knoten) ist
    print(f"Verarbeite: {element.name} - Gr√∂√üe: {element.get_groesse()} KB")
    
    # Zeige Element an
    element.anzeigen()

# Programm-Einstiegspunkt
if __name__ == "__main__":
    # Hauptfunktion starten
    main()